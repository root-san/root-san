// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/labstack/echo/v4"
)

// Member defines model for Member.
type Member struct {
	Id   *openapi_types.UUID `json:"id,omitempty"`
	Name *string             `json:"name,omitempty"`
}

// Result defines model for Result.
type Result struct {
	Amount   *int                `json:"amount,omitempty"`
	Payer    *openapi_types.UUID `json:"payer,omitempty"`
	Receiver *openapi_types.UUID `json:"receiver,omitempty"`
}

// Room defines model for Room.
type Room struct {
	Id   *openapi_types.UUID `json:"id,omitempty"`
	Name *string             `json:"name,omitempty"`
}

// RoomDetails defines model for RoomDetails.
type RoomDetails struct {
	CreatedAt *time.Time          `json:"createdAt,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Members   *[]Member           `json:"members,omitempty"`
	Name      *string             `json:"name,omitempty"`
	Results   *[]Result           `json:"results,omitempty"`
	Txns      *[]Txn              `json:"txns,omitempty"`
}

// Txn defines model for Txn.
type Txn struct {
	Amount      *int                  `json:"amount,omitempty"`
	CreatedAt   *time.Time            `json:"createdAt,omitempty"`
	Description *string               `json:"description,omitempty"`
	Id          *openapi_types.UUID   `json:"id,omitempty"`
	PaidAt      *time.Time            `json:"paidAt,omitempty"`
	Payer       *openapi_types.UUID   `json:"payer,omitempty"`
	Receivers   *[]openapi_types.UUID `json:"receivers,omitempty"`
}

// TxnRequestBody defines model for TxnRequestBody.
type TxnRequestBody struct {
	Amount      *int                  `json:"amount,omitempty"`
	Description *string               `json:"description,omitempty"`
	Id          *openapi_types.UUID   `json:"id,omitempty"`
	PaidAt      *time.Time            `json:"paidAt,omitempty"`
	Payer       *openapi_types.UUID   `json:"payer,omitempty"`
	Receivers   *[]openapi_types.UUID `json:"receivers,omitempty"`
}

// CreateRoomJSONBody defines parameters for CreateRoom.
type CreateRoomJSONBody = Room

// AddMemberJSONBody defines parameters for AddMember.
type AddMemberJSONBody = Member

// AddTransactionJSONBody defines parameters for AddTransaction.
type AddTransactionJSONBody = TxnRequestBody

// EditTransactionJSONBody defines parameters for EditTransaction.
type EditTransactionJSONBody = TxnRequestBody

// CreateRoomJSONRequestBody defines body for CreateRoom for application/json ContentType.
type CreateRoomJSONRequestBody = CreateRoomJSONBody

// AddMemberJSONRequestBody defines body for AddMember for application/json ContentType.
type AddMemberJSONRequestBody = AddMemberJSONBody

// AddTransactionJSONRequestBody defines body for AddTransaction for application/json ContentType.
type AddTransactionJSONRequestBody = AddTransactionJSONBody

// EditTransactionJSONRequestBody defines body for EditTransaction for application/json ContentType.
type EditTransactionJSONRequestBody = EditTransactionJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// create room
	// (POST /rooms)
	CreateRoom(ctx echo.Context) error
	// get room
	// (GET /rooms/{roomId})
	GetRoom(ctx echo.Context, roomId string) error
	// add member to room
	// (POST /rooms/{roomId}/member)
	AddMember(ctx echo.Context, roomId string) error
	// delete member from room
	// (DELETE /rooms/{roomId}/member/{memberId})
	DeleteMember(ctx echo.Context, roomId string, memberId string) error
	// add txn to room
	// (POST /rooms/{roomId}/txn)
	AddTransaction(ctx echo.Context, roomId string) error
	// delete txn from room
	// (DELETE /rooms/{roomId}/txn/{txnId})
	DeleteTransaction(ctx echo.Context, roomId string, txnId string) error
	// edit txn of room
	// (PUT /rooms/{roomId}/txn/{txnId})
	EditTransaction(ctx echo.Context, roomId string, txnId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateRoom converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRoom(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRoom(ctx)
	return err
}

// GetRoom converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoom(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomId" -------------
	var roomId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "roomId", runtime.ParamLocationPath, ctx.Param("roomId"), &roomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRoom(ctx, roomId)
	return err
}

// AddMember converts echo context to params.
func (w *ServerInterfaceWrapper) AddMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomId" -------------
	var roomId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "roomId", runtime.ParamLocationPath, ctx.Param("roomId"), &roomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddMember(ctx, roomId)
	return err
}

// DeleteMember converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomId" -------------
	var roomId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "roomId", runtime.ParamLocationPath, ctx.Param("roomId"), &roomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// ------------- Path parameter "memberId" -------------
	var memberId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "memberId", runtime.ParamLocationPath, ctx.Param("memberId"), &memberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter memberId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteMember(ctx, roomId, memberId)
	return err
}

// AddTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) AddTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomId" -------------
	var roomId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "roomId", runtime.ParamLocationPath, ctx.Param("roomId"), &roomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddTransaction(ctx, roomId)
	return err
}

// DeleteTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomId" -------------
	var roomId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "roomId", runtime.ParamLocationPath, ctx.Param("roomId"), &roomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// ------------- Path parameter "txnId" -------------
	var txnId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txnId", runtime.ParamLocationPath, ctx.Param("txnId"), &txnId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txnId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTransaction(ctx, roomId, txnId)
	return err
}

// EditTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) EditTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomId" -------------
	var roomId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "roomId", runtime.ParamLocationPath, ctx.Param("roomId"), &roomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// ------------- Path parameter "txnId" -------------
	var txnId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txnId", runtime.ParamLocationPath, ctx.Param("txnId"), &txnId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txnId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EditTransaction(ctx, roomId, txnId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/rooms", wrapper.CreateRoom)
	router.GET(baseURL+"/rooms/:roomId", wrapper.GetRoom)
	router.POST(baseURL+"/rooms/:roomId/member", wrapper.AddMember)
	router.DELETE(baseURL+"/rooms/:roomId/member/:memberId", wrapper.DeleteMember)
	router.POST(baseURL+"/rooms/:roomId/txn", wrapper.AddTransaction)
	router.DELETE(baseURL+"/rooms/:roomId/txn/:txnId", wrapper.DeleteTransaction)
	router.PUT(baseURL+"/rooms/:roomId/txn/:txnId", wrapper.EditTransaction)

}

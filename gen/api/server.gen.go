// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/labstack/echo/v4"
)

// Defines values for EventType.
const (
	Inner EventType = "inner"
	Outer EventType = "outer"
)

// Event defines model for Event.
type Event struct {
	// 支払い合計金額
	Amount    int       `json:"amount"`
	CreatedAt time.Time `json:"createdAt"`

	// イベント発生日時
	EventAt   time.Time          `json:"eventAt"`
	EventType EventType          `json:"eventType"`
	Id        openapi_types.UUID `json:"id"`
	Name      string             `json:"name"`

	// そのイベント内における人同士のお金のやり取り
	Txns []Txn `json:"txns"`
}

// EventRequestBody defines model for EventRequestBody.
type EventRequestBody struct {
	// 支払い合計金額
	Amount int `json:"amount"`

	// イベント発生日時
	EventAt   time.Time          `json:"eventAt"`
	EventType EventType          `json:"eventType"`
	Id        openapi_types.UUID `json:"id"`
	Name      string             `json:"name"`

	// そのイベント内における人同士のお金のやり取り
	Txns []Txn `json:"txns"`
}

// Member defines model for Member.
type Member struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// Result defines model for Result.
type Result struct {
	Amount   int                `json:"amount"`
	Payer    openapi_types.UUID `json:"payer"`
	Receiver openapi_types.UUID `json:"receiver"`
}

// Room defines model for Room.
type Room struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// RoomDetails defines model for RoomDetails.
type RoomDetails struct {
	CreatedAt time.Time          `json:"createdAt"`
	Events    []Event            `json:"events"`
	Id        openapi_types.UUID `json:"id"`
	Members   []Member           `json:"members"`
	Name      string             `json:"name"`
	Results   []Result           `json:"results"`
}

// Txn defines model for Txn.
type Txn struct {
	Amount   int                `json:"amount"`
	Id       openapi_types.UUID `json:"id"`
	Payer    openapi_types.UUID `json:"payer"`
	Receiver openapi_types.UUID `json:"receiver"`
}

// EventType defines model for eventType.
type EventType string

// CreateRoomJSONBody defines parameters for CreateRoom.
type CreateRoomJSONBody = Room

// AddEventJSONBody defines parameters for AddEvent.
type AddEventJSONBody = EventRequestBody

// EditEventJSONBody defines parameters for EditEvent.
type EditEventJSONBody = EventRequestBody

// AddMemberJSONBody defines parameters for AddMember.
type AddMemberJSONBody = Member

// CreateRoomJSONRequestBody defines body for CreateRoom for application/json ContentType.
type CreateRoomJSONRequestBody = CreateRoomJSONBody

// AddEventJSONRequestBody defines body for AddEvent for application/json ContentType.
type AddEventJSONRequestBody = AddEventJSONBody

// EditEventJSONRequestBody defines body for EditEvent for application/json ContentType.
type EditEventJSONRequestBody = EditEventJSONBody

// AddMemberJSONRequestBody defines body for AddMember for application/json ContentType.
type AddMemberJSONRequestBody = AddMemberJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// create room
	// (POST /rooms)
	CreateRoom(ctx echo.Context) error
	// get room
	// (GET /rooms/{roomId})
	GetRoom(ctx echo.Context, roomId openapi_types.UUID) error
	// add event to room
	// (POST /rooms/{roomId}/events)
	AddEvent(ctx echo.Context, roomId openapi_types.UUID) error
	// delete event from room
	// (DELETE /rooms/{roomId}/events/{eventId})
	DeleteEvent(ctx echo.Context, roomId openapi_types.UUID, eventId openapi_types.UUID) error
	// edit event of room
	// (PUT /rooms/{roomId}/events/{eventId})
	EditEvent(ctx echo.Context, roomId openapi_types.UUID, eventId openapi_types.UUID) error
	// add member to room
	// (POST /rooms/{roomId}/members)
	AddMember(ctx echo.Context, roomId openapi_types.UUID) error
	// delete member from room
	// (DELETE /rooms/{roomId}/members/{memberId})
	DeleteMember(ctx echo.Context, roomId openapi_types.UUID, memberId openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateRoom converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRoom(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRoom(ctx)
	return err
}

// GetRoom converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoom(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomId" -------------
	var roomId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "roomId", runtime.ParamLocationPath, ctx.Param("roomId"), &roomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRoom(ctx, roomId)
	return err
}

// AddEvent converts echo context to params.
func (w *ServerInterfaceWrapper) AddEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomId" -------------
	var roomId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "roomId", runtime.ParamLocationPath, ctx.Param("roomId"), &roomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddEvent(ctx, roomId)
	return err
}

// DeleteEvent converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomId" -------------
	var roomId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "roomId", runtime.ParamLocationPath, ctx.Param("roomId"), &roomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// ------------- Path parameter "eventId" -------------
	var eventId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventId", runtime.ParamLocationPath, ctx.Param("eventId"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteEvent(ctx, roomId, eventId)
	return err
}

// EditEvent converts echo context to params.
func (w *ServerInterfaceWrapper) EditEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomId" -------------
	var roomId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "roomId", runtime.ParamLocationPath, ctx.Param("roomId"), &roomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// ------------- Path parameter "eventId" -------------
	var eventId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "eventId", runtime.ParamLocationPath, ctx.Param("eventId"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter eventId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EditEvent(ctx, roomId, eventId)
	return err
}

// AddMember converts echo context to params.
func (w *ServerInterfaceWrapper) AddMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomId" -------------
	var roomId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "roomId", runtime.ParamLocationPath, ctx.Param("roomId"), &roomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddMember(ctx, roomId)
	return err
}

// DeleteMember converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roomId" -------------
	var roomId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "roomId", runtime.ParamLocationPath, ctx.Param("roomId"), &roomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// ------------- Path parameter "memberId" -------------
	var memberId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "memberId", runtime.ParamLocationPath, ctx.Param("memberId"), &memberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter memberId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteMember(ctx, roomId, memberId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/rooms", wrapper.CreateRoom)
	router.GET(baseURL+"/rooms/:roomId", wrapper.GetRoom)
	router.POST(baseURL+"/rooms/:roomId/events", wrapper.AddEvent)
	router.DELETE(baseURL+"/rooms/:roomId/events/:eventId", wrapper.DeleteEvent)
	router.PUT(baseURL+"/rooms/:roomId/events/:eventId", wrapper.EditEvent)
	router.POST(baseURL+"/rooms/:roomId/members", wrapper.AddMember)
	router.DELETE(baseURL+"/rooms/:roomId/members/:memberId", wrapper.DeleteMember)

}
